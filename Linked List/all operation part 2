// Online C compiler to run C program online
/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby,
C#, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
typedef struct node{
    struct node* prev;
    int data;
    struct node* next;
}list;
list *head=NULL,*ptr=NULL,*save=NULL;

void insert(void);
void display(void);
void del(void);
int totalcount(void);
void reverse(void);

int main()
{

    int choice=0;
    // clrscr();
    do{
   printf("\n Hello guysss....choose one\n \
   1>Insertion\n \
   2>Display\n \
   3>Delete\n \
   4>Reverse\n \
   8>Exit \
   ");
   scanf("%d",&choice);
   switch(choice){
       case 1:
       insert();
       break;

       case 2:
       display();
       break;

       case 3:
	del();
       break;

	case 4:
	reverse();
	break;
       case 8:
       break;
   }
}while(choice!=8);

    return 0;
}

void display(void){
if(head!=NULL){
    printf("\n Dekho Dekho... \n");
    ptr=head;
    while(ptr!=NULL){
	printf("%d   ",ptr->data);
	ptr=ptr->next;
    }//end of while
}
else{
    printf("\n List is empty islyi pehle jake thode elements palo g");
}//end of if-else
}// end of display function


void insert(void){
    int flag,inp=0;
    list *newn=(list*)malloc(sizeof(list));

    printf("\n Enter the element= ");
    scanf("%d",&inp);

    newn->data=inp;
    if(head==NULL){
	head=newn;
	newn->prev=newn->next=NULL;
	//printf("\n Inserted...");
    }
   else{

	printf("\n \
	1>Insertion at the beginning?\n \
	2> End\n \
	3>After a given node\n \
	4>Before a given nodes\n");
	scanf("%d",&inp);
	ptr=head;


	switch(inp){
	   case 1:
	    ptr->prev=newn;
	    newn->next=ptr;
	    newn->prev=NULL;
	    head=newn;

	   break;

	   case 2:

	   while(ptr->next!=NULL){
	       ptr=ptr->next;
	   }
	    ptr->next=newn;
	    ptr->prev=ptr;
	    newn->next=NULL;

	   break;
	   case 3:
	   flag=0;
	   printf("\n Enter the data value= ");
	   scanf("%d",&inp);
	   ptr=head;
	   while(ptr->next!=NULL)
	   {
	   if(ptr->data==inp){
	   flag=1;
	   break;
	   }//end of if
	   ptr=ptr->next;
	   }//end of while loop
	   if(flag==1){
	   newn->prev=ptr;
	   newn->next=ptr->next;
	   ptr->next=newn;
	   }
	   else{
	   printf("\n%d is not present in the list",inp);
	   return;
	   }//end of if
	   break;


	   case 4:
	   printf("\n Enter the count= ");
	   scanf("%d",&inp);
	   flag=1;
	   ptr=head;
	   while(flag!=inp)
	   {
	   ptr=ptr->next;
	   flag++;

	   }//end of while loop

	   newn->prev=ptr->prev;
	   ptr->prev->next=newn;
	   newn->next=ptr;
	   ptr->prev=newn;


	   break;

	}
	printf("\n Inserted\n ");
	display();


    }//end of if
    return;
}//end of insert function


int totalcount(void){
int count=0;
ptr=head;

while(ptr!=NULL)
{
count++;
ptr=ptr->next;
}
return count;
}//end of total count



void del(void){
int flag, count=0,inp=0;
if(head==NULL){
printf("\n The list is empty");
return;
}
count=totalcount();
if(count==1){
       free(head);
       head=NULL;
}
else
{

ptr=head;
printf("\n Choose 1>Beg 2>End 3>After a node= ");
scanf("%d",&inp);
switch(inp){
case 1:
ptr->next->prev=NULL;
head=ptr->next;
ptr->next=NULL;
//free(ptr);
break;

case 2:      //not working
while(ptr->next!=NULL){
    ptr->prev=ptr;
ptr=ptr->next;

}
ptr->prev->next=NULL;
//free(ptr);
break;

case 3:
 flag=0;
	   printf("\n Enter the data value= ");
	   scanf("%d",&inp);
	   ptr=head;
	   while(ptr->next!=NULL)
	   {
	   if(ptr->data==inp){
	   flag=1;
	   break;
	   }//end of if
	   ptr=ptr->next;
	   }//end of while
	   if(flag==1){
	   ptr->next->next->prev=ptr;
	   ptr->next->prev=NULL;
	   ptr->next=ptr->next->next;

	   }
	   else{
	   printf("\n Not found");
	   return;
	   }
break;

}//end of switch
printf("\n Deleted\n");
display();
}

return;
}  //end of del function

void reverse(void){
int temp=0;
//save=head;
while(ptr->next!=NULL){
 ptr=ptr->next;   
}
head=ptr;
ptr=head;
while(ptr->prev!=NULL)
{
    
printf("%d  ",ptr->data);
ptr=ptr->prev;
}

printf("\n Reversed...\n");

}







