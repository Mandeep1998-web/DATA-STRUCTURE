// linked list operation 
#include<stdio.h>
#include<stdlib.h>
  struct node
{
    int data;
    struct node *next;
};
    typedef struct node NODE;
    int choice=1;
    NODE *head,*newnode,*temp;
   
//function declaration
void createlist(void );
void insert_at_beg(void);
void insert_after_loc(void);
void insert_at_end(void);
void delete_node(void);
void terminate(void);
int count();
int main(){
    int n;
    do{
        printf("\n Enter 1 for create a link list\n");
        printf("Enter 2 for insert in beginning of a linked list\n");
        printf("Enter 3 for insert after any location \n");
        printf("Enter 4 for inserting at the end \n");
        printf("Enter 5 for delete the node\n");
        printf("Enter 6 to terminate\n");
        printf("Enter the choice :");
        scanf("%d",&n);
        switch(n){
            case 1:
            createlist();
            break;
            case 2:
           insert_at_beg();
           break;
            case 3:
              insert_after_loc();
            break;
            case 4:
                 insert_at_end();
           break;
            case 5:
           delete_node();
           break;
            case 6:
            terminate();
            break;
        }
       
    }
        while(n!=6);
}
void createlist(){
     head=0;
    int choice=1;
    while(choice==1){
        newnode=(NODE *)malloc(sizeof(NODE));
        printf("Enter data item\n");
        scanf("%d",&newnode-> data);
        newnode->next=0;
        if(head==0)
        {
         head=temp=newnode;

        }
        else
        {
            temp->next=newnode;
            temp=newnode;
        }
        printf("Do you want to continue:(Type 0 or 1)?\n");
        fflush(stdin);
        scanf("%d",&choice);
    }
    temp=head;
    printf("Your created linked list items are: ");
    while(temp!=0)
    {
        printf("\n%d  ",temp->data);
        temp=temp->next;
    }
}
///////////////////////////////////////
void insert_at_beg(){
  newnode=(NODE *)malloc(sizeof(NODE));
  printf("Enter data you want to insert");
  scanf("%d",&newnode->data);
  newnode->next=head;
  head=newnode;
  temp=head;
  printf("Your created linked list items are: ");
    while(temp!=0)
    {
        printf("\n%d  ",temp->data);
        temp=temp->next;
    }
}
/////////////////////////////////////////
void insert_at_end(){
    newnode=(NODE*)malloc(sizeof(NODE));
    printf("Enter the value that you want to insert at the end");
    scanf("%d",&newnode->data);
    temp=head;
    while(temp->next!=0){ //**here important thing is temp->next!=0 and when we have to traverse we always take temp!=0
        temp=temp->next;
    }
    temp->next=newnode;
    temp=head;
  printf("Your created linked list items are: ");
    while(temp!=0)
    {
        printf("\n%d  ",temp->data);
        temp=temp->next;
    }
}
////////////////////////////////////////////
void insert_after_loc(){
    int loc;
      int i=1;//***********dont put i=0
        newnode=(NODE*)malloc(sizeof(NODE));
     //    int counting=count();
       //printf("%d",counting);
        printf("Enter the location");
        scanf("%d",&loc);
    temp=head;
    printf("\nEnter the item");
    scanf("%d",&newnode->data);
     while(i<loc)
       {
      temp=temp->next;
      i++;
      }
      newnode->next=temp->next;
      temp->next=newnode;
      
      temp=head;
  printf("Your updated linked list items are: ");
    while(temp!=0)
    {
        printf("\n%d  ",temp->data);
        temp=temp->next;
    }
}
/////////////////////////
void delete_node(){
    struct node *prev;// this is taken like this because we have to store the address that's why pointer variable
    struct node *trav;
    int num;
  
    printf("Enter 1 for delete the first node \n");
    printf("Enter 2 for delete the end node\n");
    printf("Enter 3 for delete the node after some location");
    scanf("%d",&num);
    switch(num){
        //case 1:
        case 2: 
        temp=head;
        while(temp->next!=NULL){
            prev=temp;
            temp=temp->next;
        }
        if(head==temp)//means i have only one node
        {
            head=0;
        }
        else{
            prev->next=NULL;
        }
        free(temp);
        trav=head;
        printf("After deletion the linked list is like this\n");
        while(trav!=0){
            printf("\n %d",trav->data);
            trav=trav->next;
        }
        //case 3:
    }
    
}
//int count(){
  //  temp=head;
  //  int count=0;
    //while(temp!=0){
  //      count++;
  //  }
//}
void terminate(){
    exit;
}
